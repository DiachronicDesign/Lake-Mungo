/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("Lake Mungo Module", "Very first line of logic after imports.");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/
loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/
startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/** Fetches the contents of a specifed vocabluary and stores it in the given list. **/
fetchVocabulary(String vocabName, List storageList) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocabulary()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
    }
  }); 
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    populateHierarchicalDropDown(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null, null);
}

makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, null);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, container, null, null);
}

/** Makes a dynamic vocab nested in the specified and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container, String attributeName, String attributeType) {
  viewDef = createViewDef();
  if (type.equals("CheckBoxGroup")) {
    viewDef.createCheckboxGroup();
  } else if (type.equals("RadioGroup")) {
    viewDef.createRadioGroup();
  } else if (type.equals("PictureGallery")) {
    viewDef.createPictureGallery();
  } else {
    Log.e("makeDynamicVocab()", "Error: invalid vocab type provided.");
    return;
  }
  // set the label for the dynamic view
  if (!isNull(label)) {
    viewDef.setLabel(label);
  }
  // link the dynamic view to a property in the data schema
  if (!isNull(attributeName) && !isNull(attributeType)) {
    viewDef.setAttributeName(attributeName).setAttributeType(attributeType);
  }
  // Add the certainty, annotation and description
  viewDef.setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
  // populate the dynamic view choices with the contents of some vocabulary
  String tabgroup = path.split("/")[0];
  String tab = path.split("/")[1];
  String view = path.split("/")[2];
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
    onFetch(result) {
      // print ("Dynamic Vocab: " + result);
      for (item : result) {
        viewDef.addChoice(item.get(1), item.get(0));
      }
      if (!isNull(container)) {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in container '" + container + "'");
        createView(path, viewDef, container);
      } else {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in tab '" + tabgroup + "/" + tab + "'");
        createView(path, viewDef);
      }
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
  Log.d("makeDynamicVocab()", "Refreshing CSS for tabgroup: " + tabgroup);
  refreshTabgroupCSS(tabgroup);
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/** Action Bar **/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

/*** MODULE CONTROL ***/
// List of feature entities for recording.
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{oldBone}", "Old Bone"));
entityTypes.add(new NameValuePair("{hearth}", "Hearth"));
entityTypes.add(new NameValuePair("{midden}", "Midden"));
entityTypes.add(new NameValuePair("{stone}", "Stone Artefact Clusters"));
entityTypes.add(new NameValuePair("{isolated}", "Isolated"));
populateDropDown("control/control/entityTypes", entityTypes);
// entityTypes.add(0, new NameValuePair("{all}", "Feature"));
populateDropDown("control/search/entityTypes", entityTypes);

/* Loads a list view of existing entities. */
loadSearch() {
  String type = getFieldValue("control/search/entityTypes");
  populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;", 25);
}

/** Creates a record for the selected feature type. **/
newFeature() {
  String type = getFieldValue("control/control/entityTypes");
  if (type.equals("Old Bone")) {
    oldbone.create();
  } else if (type.equals("Hearth")) {
    hearth.create();
  } else if (type.equals("Midden")) {
    midden.create();
  } else if (type.equals("Stone Artefact Clusters")) {
    stone.create();
  } else if (type.equals("Isolated")) {
    isolated.create();
  }
}

loadFeature() {
  String entityID = getListItemValue();
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        entity_id = entityID;
        Log.d("loadFeature()", "Loading entity id: " + entityID);
        if (result.get(0).get(0).equals("Old Bone")) {
          oldbone.load();
        } else if (result.get(0).get(0).equals("Hearth")) {
          hearth.load();
        } else if (result.get(0).get(0).equals("Midden")) {
          showToast("Placeholder for loading a midden feature");
        } else if (result.get(0).get(0).equals("Stone Artefact Clusters")) {
          showToast("Placeholder for loading a stone feature");
        } else if (result.get(0).get(0).equals("Isolated")) {
          showToast("Placeholder for loading an isolated feature");
        }
      }
    });
  } else {
    Log.e("loadFeature()", "Error: cannot load an entity with a null ID.");
  }
}

onEvent("control/control/newEntity", "delayclick", "newFeature();");
onEvent("control/search/entityTypes", "click", "loadSearch();");
onEvent("control/search", "show", "loadSearch();");
onEvent("control/search/entityList", "click", "loadFeature();");

/*** HEARTH FEATURE ***/
hearthFeature() {
  String entityTabgroup = "hearth";
  String type = "Hearth";
  String desc = type + " record";
  String id = null;
  String relTypeName = ""; // NEED TO REPLACE THIS WITH THE ACTUAL RELATIONSHIP NAME!!!
  
  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/" + "hearthType"             , "Hearth_-_Hearth_Type");
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/" + "charcoal"               , "Hearth_-_Charcoal");
    makeVocab("PictureGallery"       , entityTabgroup + "/hearthStructure/" + "insituProportion"           , "Hearth_-_Proportion_of_material_that_remains_in_situ");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/hearthStructure/" + "heatRetainer"               , "Hearth_-_Modification_of_heat-retainer_hearths");
    makeVocab("DropDown"             , entityTabgroup + "/hearthStructure/" + "nonHeatRetainer"            , "Hearth_-_Modification_of_non-heat_retainer_hearths");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "topographicSetting"      , "Hearth_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "sedimentType"            , "Hearth_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "erosionVulnerability"    , "Hearth_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "paleotopographicSetting" , "Hearth_-_Palaeotopographic_Setting");
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = 'Associated Materials' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +") " + 
        "limit ? offset ?;";
      populateCursorList(entityTabgroup + "/associatedMaterials/associatedMaterialList", assocListQuery, 25);
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedMaterialList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
    } 
  }

  onEvent(entityTabgroup, "show", "hearth.save();");
  onEvent(entityTabgroup + "/associatedMaterials", "show", "hearth.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialList", "click", "showToast(\"Placeholder for loading an associated material\");");

  return this;
}
hearth = hearthFeature();
hearth.init();

/*** HEARTH ASSOCIATED MATERIALS ***/



/*** OLD BONE FEATURE ***/
oldboneFeature() {
  String entityTabgroup = "oldBone";
  String archentType = "Old Bone";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = "Old Bone And Associated Materials";
  String assocTabgroup = "oldboneAssociatedMaterials";
  List clusterTypeVocabulary = new ArrayList();

  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        Log.d("autosave", "id: " + id);
        Log.d("autosave", "uuid: " + uuid.toString());
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    String selectedID = getListItemValue();
    if (isNull(selectedID)) {
      showToast("No entity selected");
      return;
    }
    id = selectedID;
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        onclickClusterType();
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

  /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/clusterType"                    , "OldBone_-_Cluster_Type");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/bodyPartsIdentified"           , "OldBone_-_Body_Parts_Identifed");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/taxonIdentified"               , "OldBone_-_Taxon_Identified");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/bonePreservation"              , "OldBone_-_Bone_Preservation");
    makeVocab("CheckBoxGroup"        , entityTabgroup + "/insituAndSurfaceBone/deliberateSurfaceModification" , "OldBone_-_Deliberate_Surface_Modification");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/topographicSetting"              , "OldBone_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/sedimentType"                    , "OldBone_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/stratigraphicUnit"               , "OldBone_-_Stratigraphic_Unit");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/erosionVulnerability"            , "OldBone_-_Vulnerability_To_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/paleotopographicSetting"         , "OldBone_-_Palaeotopographic_Setting");
    fetchVocabulary("OldBone_-_Cluster_Type", clusterTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+oldboneAssoc.archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +") " + 
        "limit ? offset ?;";
      populateCursorList(entityTabgroup + "/associatedMaterials/associatedInsituList", assocListQuery, 25);
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedInsituList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedInsituList", result);
    } 
  }

  /** Displays the insitu proportion view. **/
  displayInsituProportion() {
    String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
    if (isNull(selectedItem)) {
      Log.e("updateInsituProportion()", "Null field value for: \"oldBone/basicIdentification/clusterType\"");
      return;
    } else if (clusterTypeVocabulary == null) {
      Log.e("updateInsituProportion()", "Null value for: \"clusterTypeVocabulary\"");
      return;
    }
    String dynamicView = "oldBone/insituAndSurfaceBone/insituProportion";
    Boolean removeDynamicView = true;
    // iterate through the cluster type vocab and display the insitu proportion view if insitu values are seletced
    for (clusterType : clusterTypeVocabulary) {
      if (selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{insitBO}") || clusterType.get(1).equals("{insitAndSurf}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
        removeDynamicView = false;
        if (!hasView(dynamicView)) {
            executeViewTask(new ViewTask(){
            doTask() {
              String vocab = "OldBone_-_Proportion_of_material_that_remains_in_situ";
              String callback = "makeVocab(\"PictureGallery\", \""+dynamicView+"\", \""+vocab+"\");";
              makeDynamicVocab("PictureGallery", dynamicView, vocab, "{oldBoneUI_insituProportion}", callback, "oldBone/insituAndSurfaceBone/insituProportion", vocab, "vocab"); 
              Log.d("displayInsituProportion()", "Making insituProportion picture gallery");
            }
          });
        }
      }
    }
    if (removeDynamicView) {
      if (hasView(dynamicView)) {
        removeView(dynamicView);
      }
    }
  }

  onclickClusterType() {
    String selectedItem = getFieldValue("oldBone/basicIdentification/clusterType");
    Boolean showAssocTab = false;
    for (clusterType : clusterTypeVocabulary) {
      if (!isNull(selectedItem) && selectedItem.equals(clusterType.get(0)) && (clusterType.get(1).equals("{boneAndOtherMaterial}") || clusterType.get(1).equals("{inistAndOth}") || clusterType.get(1).equals("{surfAndOth}") || clusterType.get(1).equals("{bothAndOth}"))) {
        showAssocTab = true;
      }
    }
    if (showAssocTab) {
      Log.d("oldBone.onClickClusterType()", "Showing associated materials tab");
      showTab("oldBone/associatedMaterials");
      showTab("oldBone/basicIdentification");
    } else {
      Log.d("oldBone.onClickClusterType()", "Cancelling associated materials tab");
      cancelTab("oldBone/associatedMaterials", false);
    }
  }

  onEvent(entityTabgroup, "show", "oldbone.save();");
  onEvent(entityTabgroup, "show", "oldbone.onclickClusterType();");
  onEvent(entityTabgroup + "/associatedMaterials", "show", "oldbone.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/basicIdentification/clusterType", "click", "oldbone.displayInsituProportion(); oldbone.onclickClusterType();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedSurfaceList", "click", "showToast(\"Placeholder for loading an associated material\");");
  onEvent(entityTabgroup + "/associatedMaterials/recordInsituMaterial", "click", "oldboneAssoc.create();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedInsituList", "click", "oldboneAssoc.load();");

  return this;
}
oldbone = oldboneFeature();
oldbone.init();

/*** OLD BONE ASSOCIATED MATERIALS ***/
oldboneAssociatedMaterials() {
  String tabgroup = "oldboneAssociatedMaterials";
  String archentType = "Old Bone Associated Materials";
  String relTypeName = "Old Bone And Associated Materials";
  String id = null;
  Boolean loading = false;
  Boolean isInsituMaterial = true;
  Boolean removeAssocMussel = true;
  Boolean removeAssocHearth = true;
  Boolean removeAssocEggshell = true;
  Boolean removeAssocStone = true;
  Boolean removeAssocOther = true;
  Boolean removeChippedStone = true;
  Boolean removeUnmodifiedStone = true;
  Boolean removeGroundStone = true;
  Boolean removeRetouchedArtefacts = true;
  List insituMaterialVocabulary = new ArrayList();
  List surfaceMaterialVocabulary = new ArrayList();
  List stoneArtefactsVocabulary = new ArrayList();
  List chippedStoneVocabulary = new ArrayList();

  init() {
    fetchVocabulary("OldBone_-_Associated_in_situ_material", insituMaterialVocabulary);
    fetchVocabulary("OldBone_-_Associated_surface_material", surfaceMaterialVocabulary);
    fetchVocabulary("OldBone_-_Associated_Stone_Artefacts", stoneArtefactsVocabulary);
    fetchVocabulary("OldBone_-_Associated_Chipped_Stone_Artefacts", chippedStoneVocabulary);
  }

  /** Saves the old bone associated materials record. **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(tabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("oldboneAssociatedMaterials.save()", "Saving the  relation between oldBone " + oldbone.id + " and associatedMaterials " + id);
        String callback = "oldbone.listAssociatedMaterials();" + "showTab(\"oldBone/associatedMaterials\");";
        saveEntitiesToRel(relTypeName, oldbone.id, id, callback);
      }
    }, enable_autosave);
  }

  /** Loads the old bone associated materials record. **/
  load() {
    selectedID = getListItemValue();
    if (!isNull(selectedID) && !selectedID.equals("placeholder")) {
      Log.d("load()", "Preparing to load associated material with ID: " + selectedID);
      id = selectedID;
      loading = true;
      removeAllViewsAndContainers(tabgroup);
      renderControlTab();
    }
  }

  /** Creates an old bone associated materials record. **/
  create() {
    if (!isNull(oldbone.id)) {
      fetchOne("select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '"+archentType+"' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+oldbone.id+" " +
        "and relntypeName = '"+relTypeName+"') " +
        "and uuid != "+oldbone.id+");",  new FetchCallback() {
        onFetch(result) {
          if(isNull(result)) {
            id = null;
            removeAllViewsAndContainers(tabgroup);
            newTabGroup(tabgroup);
          } else {
            showToast("Only one associated material can be recorded");
          }
        }
      }); 
    }
  }

  /** Retrieves the dynamic associated material selection or null if it does not exist. **/
  List getSelectedAssocMaterial() {
    String dynamicView = null;
    if (isInsituMaterial) {
      dynamicView = "oldboneAssociatedMaterials/nearbyMaterial/assocInsituMaterial";
    } else {
      dynamicView = "oldboneAssociatedMaterials/nearbyMaterial/assocSurfaceMaterial";
    }
    if (hasView(dynamicView)) {
      return getFieldValue(dynamicView);
    } else {
      Log.e("getSelectedAssocMaterial()", "No \"assocInsituMaterial\" or \"assocSurfaceMaterial\" dynamic view exists");
      return null;
    }
  }

  /** Display the associated material list and attach a callback to render the other tabs when appropriate. **/
  renderControlTab() {
    if (isInsituMaterial) {
      String dynamicView = "oldboneAssociatedMaterials/nearbyMaterial/assocInsituMaterial";
      if (!hasView(dynamicView)) {
        String vocab = "OldBone_-_Associated_in_situ_material";
        String callback = "onEvent(\""+dynamicView+"\", \"click\", \"oldboneAssoc.renderAssocTabs();\"); oldboneAssoc.renderAssocTabs();";
        executeViewTask(new ViewTask(){
          doTask() {
            Log.d("renderControlTab()", "Making the oldboneAssoc insituMaterial view, as it doesn't exist");
            makeDynamicVocab("CheckBoxGroup", dynamicView, vocab, "{oldBoneUI_assocInsituMaterial}", callback, null, vocab, "vocab");
            if (loading) {
              Log.d("renderControlTab()", "Preparing to load");
              loadAssocCallback();
            }
          }
        });
      } else {Log.d("renderControlTab()", "Not making oldboneAssoc insituMaterial view, as it already exists");}
    }
  }

  /** Displays the associated material tabs when appropriate. **/
  renderAssocTabs() {
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty()) {
      for (selectedItem : selectedAssocMaterial) {
        if (isInsituMaterial) {
          // render the associated insitu material dynamic views
          for (type : insituMaterialVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              executeViewTask(new ViewTask() {
                doTask() {
                if (type.get(1).equals("{mussel}")) {
                  if (!hasView("oldboneAssociatedMaterials/associatedMussel/bivalvePreservation")) {
                    makeDynamicVocab("RadioGroup", "oldboneAssociatedMaterials/associatedMussel/bivalvePreservation", "OldBone_-_Bivalve_preservation", "{bivalvePreservation}", null, "oldboneAssociatedMaterials/associatedMussel/assocMussel", "OldBone_-_Bivalve_preservation", "vocab");
                  }
                  removeAssocMussel = false;
                } else if(type.get(1).equals("{hs}")) {
                  if (!hasView("oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth")) {
                    makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "{associatedHearthMaterial}", null, "oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "vocab");
                  }
                  removeAssocHearth = false;
                } else if(type.get(1).equals("{eggshell}")) {
                  if (!hasView("oldboneAssociatedMaterials/associatedEggshell/assocEggshell")) {
                    makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "{associatedEggshell}", null, "oldboneAssociatedMaterials/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "vocab");
                  }
                  removeAssocEggshell = false;
                } else if(type.get(1).equals("{stoneart}")) {
                  String callback = "onEvent(\"oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone\", \"click\", \"oldboneAssoc.updateDynamicAssociatedStone();\");";
                  if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone")) {
                    makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "{associatedStoneArtefacts}", callback, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "vocab");
                  }
                  if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial")) {
                    makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial", "OldBone_-_Raw_Material_Types_Present", "{rawMaterialTypesPresent}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial", "OldBone_-_Raw_Material_Types_Present", "vocab");
                  }
                  removeAssocStone = false;
                } else if(type.get(1).equals("{otherart}")) {
                  if (!hasView("oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork")) {
                      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "{associatedOtherArtefacts}", null, "oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "vocab");
                  }
                  removeAssocOther = false;
                } else {
                  Log.e("renderAssocTabs()", "Error: no matched insitu selected");
                }
              }
              });
            }
          }
        } else {
          // render the associated surface material dynamic views
        }
      } 
    }
    // show and cancel the appropriate associated material tabs.
    onShowAssociatedMaterials();
  }

  /** Shows or cancels the associated material tabs. **/
  onShowAssociatedMaterials() {
    // if the tab show is triggered after loading, don't execute the rest of this function.
    if (loading) {
      Log.d("onShowAssociatedMaterials()", "Exiting function, loading associated material");
      return;
    }
    // remove unselected tabs
    if (removeAssocMussel) {
      cancelTab("oldboneAssociatedMaterials/associatedMussel", false);
    }
    if (removeAssocHearth) {
      cancelTab("oldboneAssociatedMaterials/associatedHearthMaterial", false);
    } 
    if (removeAssocEggshell) {
      cancelTab("oldboneAssociatedMaterials/associatedEggshell", false);
    }
    if (removeAssocStone) {
      cancelTab("oldboneAssociatedMaterials/associatedStoneArtefacts", false);
    }
    if (removeAssocOther) {
      cancelTab("oldboneAssociatedMaterials/associatedOtherWorkedMaterial", false);
    }
    // show the selected tabs
    if (!removeAssocMussel) {
      showTab("oldboneAssociatedMaterials/associatedMussel");
      removeAssocMussel = true;
    }   
    if (!removeAssocHearth) {
      showTab("oldboneAssociatedMaterials/associatedHearthMaterial");
      removeAssocHearth = true;
    }
    if (!removeAssocEggshell) {
      showTab("oldboneAssociatedMaterials/associatedEggshell");
      removeAssocEggshell = true;
    } 
    if (!removeAssocStone) {
      showTab("oldboneAssociatedMaterials/associatedStoneArtefacts");
      removeAssocStone = true;
    } 
    if (!removeAssocOther) {
      showTab("oldboneAssociatedMaterials/associatedOtherWorkedMaterial");
      removeAssocOther = true;
    }
    // switch to the control tab and save the tabgroup
    showTab("oldboneAssociatedMaterials/nearbyMaterial");
    oldboneAssoc.save();
  }

  loadAssocCallback() {
    // render the default views for each associated material tab
    if (!hasView("oldboneAssociatedMaterials/associatedMussel/bivalvePreservation")) {
      makeDynamicVocab("RadioGroup", "oldboneAssociatedMaterials/associatedMussel/bivalvePreservation", "OldBone_-_Bivalve_preservation", "{bivalvePreservation}", null, "oldboneAssociatedMaterials/associatedMussel/assocMussel", "OldBone_-_Bivalve_preservation", "vocab");
    }
    removeAssocMussel = false;
    if (!hasView("oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "{associatedHearthMaterial}", null, "oldboneAssociatedMaterials/associatedHearthMaterial/assocHearth", "OldBone_-_Associated_Hearth_Material", "vocab");
    }
    removeAssocHearth = false;
    if (!hasView("oldboneAssociatedMaterials/associatedEggshell/assocEggshell")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "{associatedEggshell}", null, "oldboneAssociatedMaterials/associatedEggshell/assocEggshell", "OldBone_-_Associated_Eggshell", "vocab");
    }
    removeAssocEggshell = false;
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone")) {
      String callback = "onEvent(\"oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone\", \"click\", \"oldboneAssoc.updateDynamicAssociatedStone();\");";
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "{associatedStoneArtefacts}", callback, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone", "OldBone_-_Associated_Stone_Artefacts", "vocab");
    }
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial", "OldBone_-_Raw_Material_Types_Present", "{rawMaterialTypesPresent}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRawMaterial", "OldBone_-_Raw_Material_Types_Present", "vocab");  
    }
    removeAssocStone = false;
    if (!hasView("oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "{associatedOtherArtefacts}", null, "oldboneAssociatedMaterials/associatedOtherWorkedMaterial/assocOtherwork", "OldBone_-_Associated_Other_Artefacts", "vocab");  
    }
    removeAssocOther = false;

    // render the 'selection-dependent' views for the stone tab
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone")) {
      String callback = "onEvent(\"oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc.updateDynamicChippedStone();\");";
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{chippedStoneArtefacts}", callback, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");   
    }
    removeChippedStone = false;
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{unmodifiedStone}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
    }    
    removeUnmodifiedStone = false;
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{groundStoneType}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab"); 
    } 
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{groundStoneStatus}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");     
    }    
    removeGroundStone = false;
    if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone")) {
      makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{retouchedArtefacts}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");    
    }
    removeRetouchedArtefacts = false;
    
    // load the saved values into the rendered views
    dialog = showBusy("loading record", "please wait");
    showTabGroup("oldboneAssociatedMaterials", id, new FetchCallback() {
      onFetch(result) {
        // print("loaded assoc: " + result + " with attributes: " + result.getAttributes());
        removeUnselectedMaterials();
        dialog.dismiss();
      }
    });
  }

  /** Removes the tabs for unselected materials when loading. **/
  removeUnselectedMaterials() {
    // only perform the removal if the associated materials are being loaded.
    if (!loading) {
      return;
    }
    Log.d("removeUnselectedMaterials()", "Removing unseletected materials from loaded associated material.");
    // get the selected material list values 
    selectedAssocMaterial = getSelectedAssocMaterial();
    if (selectedAssocMaterial != null && !selectedAssocMaterial.isEmpty())
    {
      removeAssocMussel = true;
      removeAssocHearth = true;
      removeAssocEggshell = true;
      removeAssocStone = true;
      removeAssocOther = true;
      // flag the selected values which shouldn't be removed.
      for (selectedItem : selectedAssocMaterial) {
        if (isInsituMaterial) {
          for (type : insituMaterialVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{mussel}")) {
                removeAssocMussel = false;
              } else if(type.get(1).equals("{hs}")) {
                removeAssocHearth = false;
              } else if(type.get(1).equals("{eggshell}")) {
                removeAssocEggshell = false;
              } else if(type.get(1).equals("{stoneart}")) {
                removeAssocStone = false;
              } else if(type.get(1).equals("{otherart}")) {
                removeAssocOther = false;
              } else {
                Log.e("removeUnselectedMaterials()", "Error: no matched insitu selected");
              }
            }
          }
        }
      }
      // remove the appropriate selection-dependent views for the tabs that aren't going to be removed.
      if (!removeAssocStone) {
        removeChippedStone = true;
        removeUnmodifiedStone = true;
        removeGroundStone = true;
        assocStones = getFieldValue("oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone");
        for (selectedItem : assocStones) {
          for (type : stoneArtefactsVocabulary) {
            if (selectedItem.getName().equals(type.get(0))) {
              if (type.get(1).equals("{cs}")) {
                removeChippedStone = false;
              } else if (type.get(1).equals("{um}")) {
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("{ground}")) {
                removeGroundStone = false;
              } else {
                Log.e("removeUnselectedMaterials", "Error: no stone artefact selected");
              }
            }
          }
        }
        removeDynamicAssociatedStone();
        removeRetouchedArtefacts = true;
        if (!removeChippedStone) {
          chippedStone = getFieldValue("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone");
          for (selectedItem : chippedStone) {
            for (type : chippedStoneVocabulary) {
              if (selectedItem.getName().equals(type.get(0))) {
                if (type.get(1).equals("{ru}")) {
                  removeRetouchedArtefacts = false;
                }
              }
            }
          }
        }
        removeRetouchedArtefacts();
      }
      // remove the unselected tabs, switching the load flag mark that the 'loading' process has finished.
      loading = false;
      onShowAssociatedMaterials();
    }
  }

  /** Detect and display the relevent associated stone artefact views. **/
  updateDynamicAssociatedStone() {
    removeChippedStone = true;
    removeUnmodifiedStone = true;
    removeGroundStone = true;
    assocStones = getFieldValue("oldboneAssociatedMaterials/associatedStoneArtefacts/assocStone");
    // compare each selected artefact against the stone artefact vocab to determine which one(s) the user selected
    for (selectedItem : assocStones) {
      for (type : stoneArtefactsVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          executeViewTask(new ViewTask() {
            doTask() {
              if (type.get(1).equals("{cs}")) {
                String callback = "onEvent(\"oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone\", \"click\", \"oldboneAssoc.updateDynamicChippedStone();\");";
                if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone")) {
                  makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "{chippedStoneArtefacts}", callback, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone", "OldBone_-_Associated_Chipped_Stone_Artefacts", "vocab");
                }
                removeChippedStone = false;
              } else if (type.get(1).equals("{um}")) {
                if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone")) {
                  makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "{unmodifiedStone}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone", "OldBone_-_Associated_Unmodified_Stone", "vocab");
                }
                removeUnmodifiedStone = false;
              } else if (type.get(1).equals("{ground}")) {
                if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType")) {
                  makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "{groundStoneType}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType", "OldBone_-_Ground_Stone_Types_Present", "vocab");
                }
                if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus")) {
                  makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "{groundStoneStatus}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus", "OldBone_-_Ground_Stone_Status", "vocab");
                }
                removeGroundStone = false;
              } else {
                Log.e("updateDynamicAssociatedStone", "Error: no stone artefact selected");
              }
            }
          });
        }
      }    
    }
    // remove the appropriate dynamic views.
    removeDynamicAssociatedStone();
  }

  /** Removes the relevent associated stone artefact views. **/
  removeDynamicAssociatedStone() {
    if (removeChippedStone) {
      if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone")) {
        removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone");
        if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone")) {
          removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone");
        }
      }
    }
    if (removeUnmodifiedStone) {
      if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone")) {
        removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocUnmodifiedStone");
      }
    }
    if (removeGroundStone) {
      if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType")) {
        removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneType");
      }
      if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus")) {
        removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocGroundStoneStatus");
      }
    }
  }

  /** Displays the associated retouched artefacts view for associated stone artefacts **/
  updateDynamicChippedStone() {
    chippedStone = getFieldValue("oldboneAssociatedMaterials/associatedStoneArtefacts/assocChippedStone");
    removeRetouchedArtefacts = true;
    for (selectedItem : chippedStone) {
      for (type : chippedStoneVocabulary) {
        if (selectedItem.getName().equals(type.get(0))) {
          executeViewTask(new ViewTask(){
            doTask() {
              if (type.get(1).equals("{ru}")) {
                Log.d("updateDynamicChippedStone", "ru selected");
                if (!hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone")) {
                  makeDynamicVocab("CheckBoxGroup", "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "{retouchedArtefacts}", null, "oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone", "OldBone_-_Associated_Retouched_Artefacts", "vocab");
                }
                removeRetouchedArtefacts = false;
              }
            }
          }); 
        }
      }
    }
    removeRetouchedArtefacts();
  }

  /** Removes the retouched artefacts view if appropriate. **/
  removeRetouchedArtefacts() {
    if (removeRetouchedArtefacts) {
      if (hasView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone")) {
        removeView("oldboneAssociatedMaterials/associatedStoneArtefacts/assocRetouchedStone");
      }
    }
  }

  onEvent(tabgroup, "show", "oldboneAssoc.onShowAssociatedMaterials(); oldboneAssoc.renderControlTab(); keepTabGroupChanges(\""+tabgroup+"\"); oldboneAssoc.save();");

  return this;
}
oldboneAssoc = oldboneAssociatedMaterials();
oldboneAssoc.init();

/*** MIDDEN FEATURE ***/
middenFeature() {
  String entityTabgroup = "midden";
  String archentType = "Midden";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = ""; // NEED TO REPLACE THIS WITH THE ACTUAL RELATIONSHIP NAME!!!
  
  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/" + "middenType"                            , "Midden_-_Midden_Type");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "presenceOfCharcoal"                    , "Midden_-_Presence_of_charcoal");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "proportionOfMaterialThatRemainsInSitu" , "Midden_-_Proportion_of_material_that_remains_in_situ");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "bivalvePreservation"                   , "Midden_-_Bivalve_preservation");
    makeVocab("DropDown"             , entityTabgroup + "/middenDescription/" + "bivalveDispersal"                      , "Midden_-_Bivalve_dispersal");

    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "topographicSetting"                     , "Midden_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "sedimentType"                           , "Midden_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "erosionVulnerability"                   , "Midden_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/" + "paleotopographicSetting"                , "Midden_-_Palaeotopographic_Setting");
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '" + midden.archentType + "Associated Materials' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +") " + 
        "limit ? offset ?;";
      populateCursorList(entityTabgroup + "/associatedMaterials/associatedMaterialList", assocListQuery, 25);
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedMaterialList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
    } 
  }

  onEvent(entityTabgroup, "show", "midden.save();");
  onEvent(entityTabgroup + "/associatedMaterials", "show", "midden.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialList", "click", "showToast(\"Placeholder for loading an associated material\");");

  return this;
}
midden = middenFeature();
midden.init();

/*** STONE ARTEFACT FEATURE ***/
stoneFeature() {
  String entityTabgroup = "stoneArtefactClusters";
  String archentType = "Stone Artefact Clusters";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = "Stone And Associated Materials";
  
  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("DropDown"       , entityTabgroup + "/basicIdentification/" + "clusterType"             , "Stone_-_Cluster_Type");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/"  + "topographicSetting"      , "Stone_-_Topographic_Setting");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/"  + "sedimentType"            , "Stone_-_Sediment_Type");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/"  + "erosionVulnerability"    , "Stone_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery" , entityTabgroup + "/topAndStratSetting/"  + "paleotopographicSetting" , "Stone_-_Palaeotopographic_Setting");
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    listAssociatedMaterials("Stone Associated Materials", "associatedMaterialListSurface");
    listAssociatedMaterials("Stone Associated Materials", "associatedMaterialListInSitu");
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '" + stone.archentType + "Associated Materials' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +") " + 
        "limit ? offset ?;";
      populateCursorList(entityTabgroup + "/associatedMaterials/associatedMaterialList", assocListQuery, 25);
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedMaterialList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
    } 
  }

  onEvent(entityTabgroup, "show", "stone.save();");
  onEvent(entityTabgroup + "/associatedMaterials", "show", "stone.listAssociatedMaterials();");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialListSurface", "click", "showToast(\"Placeholder for loading an associated material\");");
  onEvent(entityTabgroup + "/associatedMaterials/associatedMaterialListInSitu", "click", "showToast(\"Placeholder for loading an associated material\");");

  return this;
}
stone = stoneFeature();
stone.init();


/*** ISOLATED FEATURE ***/
isolatedFeature() {
  String entityTabgroup = "isolatedOccurrences";
  String archentType = "Isolated";
  String desc = archentType + " record";
  String id = null;
  String relTypeName = ""; // NEED TO REPLACE THIS WITH THE ACTUAL RELATIONSHIP NAME!!!
  List occurrenceTypeVocabulary = new ArrayList();

  /** Saves the feature **/
  save() {
    Boolean enable_autosave = true;
    saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
      onSave(uuid, newRecord) {
        id = uuid;
        Log.d("save()", desc + " saved with id: " + id);
        if (newRecord) {
          Log.d("save()", "New " + desc + " created");
        }
      }
      onError(message) {
          showToast(message);
      }  
    }, enable_autosave);
  }

  /** Creates a new feature record. **/
  create() {
    dialog = showBusy("creating a new record", "please wait");
    newTabGroup(entityTabgroup);
    id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

  /** Loads a feature record. **/
  load() {
    if (isNull(id)) {
      showToast("No entity selected");
        return;
    }
    dialog = showBusy("loading record", "please wait");
    showTabGroup(entityTabgroup, id, new FetchCallback() {
      onFetch(result) {
        Log.d("load()", "Loaded a " + desc + ", ID: " + id);
        showToast("Loaded a " + desc);
        keepTabGroupChanges(entityTabgroup);
        dialog.dismiss();
      }
    });
  }

   /** Initialises the tabgroup vocabularies. **/
  init() {
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/inSituOrSurface"        , "Isolated_-_In_Situ_or_Surface");
    makeVocab("HierarchicalDropDown" , entityTabgroup + "/basicIdentification/occurrenceType"         , "Isolated_-_Occurence_Type");
    makeVocab("DropDown"             , entityTabgroup + "/basicIdentification/stoneRawMaterialType"   , "Isolated_-_Stone_Raw_Material_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/topographicSetting"      , "Isolated_-_Topographic_Setting");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/sedimentType"            , "Isolated_-_Sediment_Type");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/erosionVulnerability"    , "Isolated_-_Vulnerability_to_Erosion");
    makeVocab("PictureGallery"       , entityTabgroup + "/topAndStratSetting/paleotopographicSetting" , "Isolated_-_Palaeotopographic_Setting");
    fetchVocabulary("Isolated_-_Occurence_Type", occurrenceTypeVocabulary);
  }

  /** Populates the in-situ and surface associated materials list. **/
  listAssociatedMaterials() {
    if(!isNull(id)) {
      String assocListQuery = "select uuid, response " +
        "from latestNonDeletedArchEntFormattedIdentifiers " +
        "where aenttypename = '" + archentType + "Associated Materials' " +
        "and uuid in  (select uuid " +
        "FROM latestNonDeletedAentReln " +
        "where relationshipid in (select relationshipid " +
        "FROM latestNonDeletedAentReln " +
        "JOIN relationship using (relationshipid) " +
        "JOIN relntype using (relntypeid) " +
        "where uuid = "+ id + " " +
        "and relntypeName = '" + relTypeName + "') " +
        "and uuid != "+ id +") " +
        "limit ? offset ?;";
      populateCursorList(entityTabgroup + "/associatedMaterials/associatedMaterialList", assocListQuery, 25);
      Log.d("listAssociatedMaterials()", "Updated cursor list: associatedMaterialList");
    } else {
      result = new ArrayList();
      result.add(new NameValuePair("{noRecordsFound}", ""));
      populateList(entityTabgroup + "/associatedMaterials/associatedMaterialList", result);
    } 
  }

  /** Displays the insitu proportion view. **/
  displayOrganicOrStone() {
    //modificationtoStoneMaterial
    String ref = "modificationtoOrganicMaterial";
    String selectedItem = getFieldValue(entityTabgroup + "/basicIdentification/occurrenceType");
    if (isNull(selectedItem)) {
      return;
    }
    if (occurrenceTypeVocabulary == null) {
      return;
    }
    String dynamicViewOrganic = entityTabgroup + "/basicIdentification/modificationtoOrganicMaterial";
    String dynamicViewStone   = entityTabgroup + "/basicIdentification/modificationtoStoneMaterial";

    /* Figure out the selected occurrence type (not the occurrence type's vocabid) */
    selectedItemText = "";
    for (occurrenceType : occurrenceTypeVocabulary) {
      if (selectedItem.equals(occurrenceType.get(0))) {
        selectedItemText = occurrenceType.get(1);
      }
    }

    /* Figure out if an organic material is selected by comparing it to `selectedItemText` */
    ArrayList organicMaterials = new ArrayList();
    ArrayList stoneMaterials   = new ArrayList();

    organicMaterials.add("{bettong}");
    organicMaterials.add("{bivalve}");
    organicMaterials.add("{carnivore}");
    organicMaterials.add("{eggemu}");
    organicMaterials.add("{egggenyo}");
    organicMaterials.add("{eggindet}");
    organicMaterials.add("{eggother}");
    organicMaterials.add("{emu}");
    organicMaterials.add("{exoskel}");
    organicMaterials.add("{fishbone}");
    organicMaterials.add("{glith}");
    organicMaterials.add("{indetbone}");
    organicMaterials.add("{macropod}");
    organicMaterials.add("{otherbird}");
    organicMaterials.add("{reptile}");
    organicMaterials.add("{rodent}");
    organicMaterials.add("{smallmars}");
    organicMaterials.add("{wombat}");

    stoneMaterials.add("{notch}");
    stoneMaterials.add("{scraper}");
    stoneMaterials.add("{backed}");
    stoneMaterials.add("{unifpt}");
    stoneMaterials.add("{bifac}");
    stoneMaterials.add("{otehrru}");
    stoneMaterials.add("{debris}");
    stoneMaterials.add("{core}");
    stoneMaterials.add("{hammer}");
    stoneMaterials.add("{mport}");
    stoneMaterials.add("{groundst}");
    stoneMaterials.add("{indet}");
    stoneMaterials.add("{bonetool}");
    stoneMaterials.add("{shellmod}");
    stoneMaterials.add("{eggmod}");
    stoneMaterials.add("{ochre}");
    stoneMaterials.add("{facetochre}");
    stoneMaterials.add("{qtzxtal}");
    stoneMaterials.add("{hscarb}");
    stoneMaterials.add("{hsterm}");
    stoneMaterials.add("{hsclay}");
    stoneMaterials.add("{hsother}");

    Boolean isSelectedOrganicMaterial = organicMaterials.contains(selectedItemText);
    Boolean isSelectedStoneMaterial   = stoneMaterials.contains(selectedItemText);

    /* Update the UI based on the selected item */
    if (isSelectedOrganicMaterial) {
      if (hasView(dynamicViewStone)) {     // First, remove the stone view if it exists
        removeView(dynamicViewStone);
      }
      if (!hasView(dynamicViewOrganic)) {  // Then, add in the organic view if it doesn't exist yet
        executeViewTask(new ViewTask(){
          doTask() {
            String vocab = "Isolated_-_Modification_to_Organic_Material";
            String callback = "makeVocab(\"CheckBoxGroup\", \""+dynamicViewOrganic+"\", \""+vocab+"\");";
            makeDynamicVocab("CheckBoxGroup", dynamicViewOrganic, vocab, "{isolatedOccurrencesUI_modificationtoOrganicMaterial}", callback, dynamicViewOrganic, vocab, "vocab"); 
          }
        });
      }
    } else if (isSelectedStoneMaterial) {
      if (hasView(dynamicViewOrganic)) {     // First, remove the *organic* view if it exists
        removeView(dynamicViewOrganic);
      }
      if (!hasView(dynamicViewStone)) {       // Then, add in the *stone* view if it doesn't exist yet
        executeViewTask(new ViewTask(){
          doTask() {
            String vocab = "Isolated_-_Modification_to_Stone_Material";
            String callback = "makeVocab(\"CheckBoxGroup\", \""+dynamicViewStone+"\", \""+vocab+"\");";
            makeDynamicVocab("CheckBoxGroup", dynamicViewStone, vocab, "{isolatedOccurrencesUI_modificationtoStoneMaterial}", callback, dynamicViewStone, vocab, "vocab"); 
          }
        });
      }
    }
  }

  onEvent(entityTabgroup, "show", "isolated.save();");
  onEvent(entityTabgroup + "/basicIdentification/occurrenceType", "click", "isolated.displayOrganicOrStone();");

  return this;
}
isolated = isolatedFeature();
isolated.init();

