/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("Lake Mungo Module", "Very first line of logic after imports.");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
}
makeLocalID();

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/
loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/
startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          populateDropDown(path, result);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Makes a dynamic vocab nested in the specified and populates it using a data_schema vocab, with a callbackFunction to execute after creating the dynamic view. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container, String attributeName, String attributeType) {
  viewDef = createViewDef();
  if (type.equals("CheckBoxGroup")) {
    viewDef.createCheckboxGroup();
  } else if (type.equals("RadioGroup")) {
    viewDef.createRadioGroup();
  } else if (type.equals("PictureGallery")) {
    viewDef.createPictureGallery();
  } else {
    Log.e("makeDynamicVocab()", "Error: invalid vocab type provided.");
    return;
  }
  // set the label for the dynamic view
  if (!isNull(label)) {
    viewDef.setLabel(label);
  }
  // link the dynamic view to a property in the data schema
  if (!isNull(attributeName) && !isNull(attributeType)) {
    viewDef.setAttributeName(attributeName).setAttributeType(attributeType);
  }
  // Add the certainty, annotation and description
  viewDef.setAnnotationEnabled(true).setCertaintyEnabled(true).setInfoEnabled(true);
  // populate the dynamic view choices with the contents of some vocabulary
  String tabgroup = path.split("/")[0];
  String tab = path.split("/")[1];
  String view = path.split("/")[2];
  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
    onFetch(result) {
      print ("Dynamic Vocab: " + result);
      for (item : result) {
        viewDef.addChoice(item.get(1), item.get(0));
      }
      if (!isNull(container)) {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in container '" + container + "'");
        createView(path, viewDef, container);
      } else {
        Log.d("makeDynamicVocab()", "Creating dynamic view '" + view + "' in tab '" + tabgroup + "/" + tab + "'");
        createView(path, viewDef);
      }
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
  Log.d("makeDynamicVocab()", "Refreshing CSS for tabgroup: " + tabgroup);
  refreshTabgroupCSS(tabgroup);
}

/** Makes a dynamic vocab and populates it using a data_schema vocab. **/
makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction, String container) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, container, null, null);
}

makeDynamicVocab(String type, String path, String attrib, String label, String callbackFunction) {
  makeDynamicVocab(type, path, attrib, label, callbackFunction, null);
}

makeDynamicVocab(String type, String path, String attrib, String label) {
  makeDynamicVocab(type, path, attrib, label, null, null);
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/** Action Bar **/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

/*** MODULE CONTROL ***/
// List of feature entities for recording.
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{hearth}", "Hearth"));
entityTypes.add(new NameValuePair("{midden}", "Midden"));
populateDropDown("control/control/entityTypes", entityTypes);
entityTypes.add(0, new NameValuePair("{all}", "Feature"));
populateDropDown("control/search/entityTypes", entityTypes);

/* Loads a list view of existing entities. */
loadSearch() {
  String type = getFieldValue("control/search/entityTypes");
  populateCursorList("control/search/entityList", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;", 25);
}

/** Creates a record for the selected feature type. **/
newFeature() {
  String type = getFieldValue("control/control/entityTypes");
  if (type.equals("Hearth")) {
    showToast("Placeholder for recording a " + hearth.desc);
    hearth.create();
  } else if (type.equals("Midden")) {
		showToast("Placeholder for recording a midden feature");
  }
}

loadFeature() {
  String entityID = getListItemValue();
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        entity_id = entityID;
        Log.d("loadFeature()", "Loading entity id: " + entityID);
        if (result.get(0).get(0).equals("Hearth")) {
          showToast("Placeholder for loading a " + hearth.desc);
        } else if (result.get(0).get(0).equals("Midden")) {
        	showToast("Placeholder for loading a midden feature");
        }

      }
    });
  } else {
    Log.e("loadFeature()", "Error: cannot load an entity with a null ID.");
  }
}

onEvent("control/control/newEntity", "delayclick", "newFeature();");
onEvent("control/search/entityTypes", "click", "loadSearch();");
onEvent("control/search", "show", "loadSearch();");
onEvent("control/search/entityList", "click", "loadFeature();");


/*** HEARTH FEATURE ***/
hearthFeature() {
	entityTabgroup = "hearth";
	desc = "Hearth record";
	String id = null;

	/** Saves the feature **/
	save() {
	  Boolean enable_autosave = true;
	  saveTabGroup(entityTabgroup, id, null, null, new SaveCallback() {
	    onSave(uuid, newRecord) {
	      id = uuid;
	      Log.d("save()", desc + " saved with id: " + id);
	      if (newRecord) {
	        Log.d("save()", "New " + desc + " created");
	      }
	    }
	    onError(message) {
	        showToast(message);
	    }  
	  }, enable_autosave);
	}

	onEvent(entityTabgroup, "show", "hearth.save();");
	
	/** Creates a new feature record. **/
	create() {
	  dialog = showBusy("creating a new record", "please wait");
	  newTabGroup(entityTabgroup);
	  id = null;
    setFieldValue(entityTabgroup + "/basicIdentification/idNumber", "0");
    setFieldValue(entityTabgroup + "/basicIdentification/gridSquare", "0");
    keepTabGroupChanges(entityTabgroup);
    save();
    dialog.dismiss();
  }

	return this;
}

hearth = hearthFeature();

/*** MIDDEN FEATURE ***/


/*** STONE ARTEFACT FEATURE ***/


/*** OLD BONE FEATURE ***/


/*** ISOLATED FEATURE ***/

